import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from statsmodels.tsa.stattools import adfuller
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
from datetime import datetime
import yfinance as yf

df = yf.download('AAPL', start='2015-01-01', end='2023-12-31')
df = df[['Close']]
df.head()

df.isnull().sum()


scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df)

train_size = int(len(scaled_data) * 0.8)
train_data = scaled_data[:train_size]
test_data = scaled_data[train_size:]


def create_dataset(data, time_step=60):
    X, y = [], []
    for i in range(len(data) - time_step - 1):
        X.append(data[i:(i + time_step), 0])
        y.append(data[i + time_step, 0])
    return np.array(X), np.array(y)

time_step = 60
X_train, y_train = create_dataset(train_data, time_step)
X_test, y_test = create_dataset(test_data, time_step)

X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')
model.summary()


model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=64, verbose=1)

train_predict = model.predict(X_train)
test_predict = model.predict(X_test)


train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))


rmse = np.sqrt(mean_squared_error(y_test_actual, test_predict))
print("Test RMSE: ", rmse)


plt.figure(figsize=(12, 6))
plt.plot(df.index[-len(y_test):], y_test_actual, label="Actual")
plt.plot(df.index[-len(y_test):], test_predict, label="Predicted")
plt.legend()
plt.title("Stock Price Prediction")
plt.show()

import streamlit as st
import yfinance as yf
import pandas as pd
from keras.models import load_model
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from datetime import datetime  # Add this import

st.title("ðŸ“ˆ Stock Price Predictor")

stock = st.text_input("Enter Stock Symbol (e.g., AAPL)", "AAPL")

df = yf.download(stock, start="2015-01-01", end=datetime.now().strftime("%Y-%m-%d"))
data = df[['Close']]
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

# Load model
model = load_model("lstm_model.h5")  # Save the model earlier

# Prepare input
last_60_days = scaled_data[-60:]
input_data = last_60_days.reshape(1, 60, 1)

prediction = model.predict(input_data)
prediction = scaler.inverse_transform(prediction)

st.write(f"Predicted Next Close Price: ${prediction[0][0]:.2f}")


streamlit run app.py
